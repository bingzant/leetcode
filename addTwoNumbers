/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    //     ListNode result;
    //     int carry = 0;
    //     int new_val;
    //     ListNode* tail = &result;
    //     while(l1 && l2){
    //         new_val = l1->val + l2->val + carry;
    //         if(new_val>=10){
    //             new_val = new_val-10;
    //             carry = 1;
    //         }
    //         ListNode* new_node = new ListNode(new_val);
    //         cout<<new_val<<endl;
    //         // if(result.next==nullptr){
    //         //     result.next = new_node;
    //         // }
    //         // else{
    //         tail->next = new_node;
    //         // }
    //         tail = new_node;
    //         l1 = l1->next;
    //         l2 = l2->next;
    //     }
    //     if(l1 || l2){
    //         tail = l1 ? l1 :l2;
    //     }
    //     else if(!l1 && !l2 && carry){

    //     }
    //     tail = result.next;
    //     while(tail){
    //         cout<<tail->val <<endl;
    //         tail = tail->next;
    //     }
        ListNode result;
        ListNode* tail = &result;
        int carry = 0;
        while(l1 || l2 || carry){
            int l1_val = l1 ? l1->val : 0;
            int l2_val = l2 ? l2->val : 0;
            int new_val = (l1_val + l2_val + carry) % 10;
            carry = (l1_val + l2_val + carry) / 10;
            ListNode* new_node = new ListNode(new_val);
            if(l1) l1 = l1->next;
            if(l2) l2 = l2->next;
            tail->next = new_node;
            tail = tail->next;
        }
        return result.next; 
    }
};
