class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int n = nums.size();
        quickSort(nums, 0, n - 1, n - k);
        return nums[n - k];
    }

private:
    void quickSort(vector<int>& nums, int low, int high, int k) {
        if (low < high) {
            int index = partition(nums, low, high);
            if (k == index) {
                return;
            } else if (k < index) {
                quickSort(nums, low, index - 1, k);
            } else {
                quickSort(nums, index + 1, high, k);
            }
        }
    }

    int partition(vector<int>& nums, int low, int high) {
        swap(nums[low], nums[(low + high) / 2]);
        int pivot = nums[low];
        int begin = low;
        while (low < high) {
            while (low < high && nums[high] >= pivot) --high;
            while (low < high && nums[low] <= pivot) ++low;
            swap(nums[low], nums[high]);
        }
        swap(nums[low], nums[begin]);
        return low;
    }
};

