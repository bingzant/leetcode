/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSubStructure(TreeNode* A, TreeNode* B) {
        if(!A) return false;
        if(!B) return false;
        // cout<<'A'<<A->val<<'B'<<B->val<<endl;
        bool result = false;
        if(A->val == B->val){
            result = isAequalB(A, B);
        }
        if(!result) result = isSubStructure(A->left, B);
        if(!result) result = isSubStructure(A->right, B);
        return result;
    }

private:
    bool isAequalB(TreeNode* A, TreeNode* B){
        if(!B) return true;
        if(!A) return false;
        if(A->val != B->val) return false;
        // cout<<"2A"<<A->val<<'B'<<B->val<<endl;
        // cout<<"3A"<<isAequalB(A->left, B->left)<<'B'<<isAequalB(A->right, B->right)<<endl;
        return isAequalB(A->left, B->left) && isAequalB(A->right, B->right);
    }
};
