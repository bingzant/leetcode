// 0422
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.empty()) return {};
        int max_raw = matrix.size();
        int max_col = matrix[0].size();
        int length = max_raw * max_col;
        vector<int> path(length);
        vector<vector<bool>> visited(max_raw, vector<bool>(max_col, false));
        int row = 0, col = 0;
        int direction[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int direction_index = 0;
        for (int i = 0; i < length; ++i) {
            path[i] = matrix[row][col];
            visited[row][col] = true;
            // next move 
            row += direction[direction_index][0];
            col += direction[direction_index][1];
            if (row < 0 || col < 0 || row >= max_raw || col >= max_col || visited[row][col] == true) {
                row -= direction[direction_index][0];
                col -= direction[direction_index][1];
                // change direction
                direction_index = (direction_index + 1) % 4;
                row += direction[direction_index][0];
                col += direction[direction_index][1];
            }
            // cout << path[i];
        }
        return path;
    }
};

// first submit
/*
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if(matrix.size()==0 || matrix[0].size()==0) return {};
        int rows = matrix.size(), cols = matrix[0].size();
        vector<int> result(rows*cols);
        vector<vector<bool>> visited(rows, vector<bool>(cols, false));
        int row=0, col=0, i=1;
        result[0] = matrix[0][0];
        visited[0][0] = true;
        while(i<rows*cols){
            while(row>=0 && col+1>=0 && row<rows && col+1<cols && visited[row][col+1]==false){
                ++col;
                result[i] = matrix[row][col];
                visited[row][col]=true;
                ++i;
                // cout<<i<<'b'<<endl;
            }
            while(row+1>=0 && col>=0 && row+1<rows && col<cols && visited[row+1][col]==false){
                ++row;
                result[i] = matrix[row][col];
                visited[row][col]=true;
                ++i;
                // cout<<i<<'a'<<endl;
            }
            while(row>=0 && col-1>=0 && row<rows && col-1<cols && visited[row][col-1]==false){
                --col;
                result[i] = matrix[row][col];
                visited[row][col]=true;
                ++i;
                // cout<<i<<'d'<<endl;
            }
            while(row-1>=0 && col>=0 && row-1<rows && col<cols && visited[row-1][col]==false){
                --row;
                result[i] = matrix[row][col];
                visited[row][col]=true;
                ++i;
                // cout<<i<<'c'<<endl;
            }
        }
        return result;
    }
};
*/
