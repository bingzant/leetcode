class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if(matrix.size()==0 || matrix[0].size()==0) return {};
        int rows = matrix.size(), cols = matrix[0].size();
        vector<int> result(rows*cols);
        vector<vector<bool>> visited(rows, vector<bool>(cols, false));
        int row=0, col=0, i=1;
        result[0] = matrix[0][0];
        visited[0][0] = true;
        while(i<rows*cols){
            while(row>=0 && col+1>=0 && row<rows && col+1<cols && visited[row][col+1]==false){
                ++col;
                result[i] = matrix[row][col];
                visited[row][col]=true;
                ++i;
                // cout<<i<<'b'<<endl;
            }
            while(row+1>=0 && col>=0 && row+1<rows && col<cols && visited[row+1][col]==false){
                ++row;
                result[i] = matrix[row][col];
                visited[row][col]=true;
                ++i;
                // cout<<i<<'a'<<endl;
            }
            while(row>=0 && col-1>=0 && row<rows && col-1<cols && visited[row][col-1]==false){
                --col;
                result[i] = matrix[row][col];
                visited[row][col]=true;
                ++i;
                // cout<<i<<'d'<<endl;
            }
            while(row-1>=0 && col>=0 && row-1<rows && col<cols && visited[row-1][col]==false){
                --row;
                result[i] = matrix[row][col];
                visited[row][col]=true;
                ++i;
                // cout<<i<<'c'<<endl;
            }
        }
        return result;
    }
};
