struct DLinkedNode {
    int key, value;
    DLinkedNode *prev, *next;
    DLinkedNode() : key(0), value(0), prev(nullptr), next(nullptr) {};
    DLinkedNode(int _key, int _value) : key(_key), value(_value), prev(nullptr), next(nullptr) {};
};


class LRUCache {
private:
    int size, capacity;
    DLinkedNode *head, *tail;
    unordered_map<int, DLinkedNode*> cache;

    void moveToHead(DLinkedNode *node) {
        node -> next = head -> next;
        head -> next -> prev = node;
        head -> next = node;
        node -> prev = head;
    }

    void delNode(DLinkedNode *node) {
        node -> prev -> next = node -> next;
        node -> next -> prev = node -> prev;
    }

    DLinkedNode* delTailNode() {
        DLinkedNode *node = tail -> prev;
        node -> prev -> next = tail;
        tail -> prev = node -> prev;
        return node;
    }

public:
    LRUCache(int _capacity) : size(0), capacity(_capacity) {
        head = new DLinkedNode();
        tail = new DLinkedNode();
        head -> next = tail;
        tail -> prev = head;
    }
    
    int get(int key) {
        if (cache.count(key) > 0) {
            DLinkedNode *node = cache[key];
            delNode(node);
            moveToHead(node);
            return node -> value;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if (cache.count(key) == 0) {
            DLinkedNode *node = new DLinkedNode(key, value);
            cache[key] = node;
            moveToHead(node);
            size++;
            if (size > capacity) {
                DLinkedNode *del = delTailNode();
                cache.erase(del -> key);
                delete del;
                size--;
            }
        } else {
            DLinkedNode *node = cache[key];
            node -> value = value;
            delNode(node);
            moveToHead(node);
        }
    }

};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
