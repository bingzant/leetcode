/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int lenA=getLength(headA), lenB=getLength(headB);
        int longLength = max(lenA,lenB), shortLength = min(lenA,lenB);
        ListNode *longList = (lenA>lenB)? headA : headB;
        ListNode *shortList = (lenA>lenB)? headB : headA;
        for(int i=0; i<longLength-shortLength; ++i) longList = longList->next;
        for(int i=0; i<shortLength; ++i){
            if(longList==shortList){
                return longList;
            }
            longList = longList->next;
            shortList = shortList->next;
        }
        return nullptr;
    }
private:
    int getLength(ListNode *head){
        int length=0;
        while(head!=nullptr){
            head = head->next;
            ++length;
        }
        return length;
    }
};
