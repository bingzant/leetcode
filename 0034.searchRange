class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int before = binarySearchBefore(nums, target, n) + 1;
        int after = binarySearchAfter(nums, target, n) - 1;
        if(before <= after && before >=0 &&  after < n && nums[before] == target && nums[after] == target)
            return {before, after};
        return {-1, -1};
    }

private:
    int binarySearchBefore(vector<int>& nums, int target, const int &n) {
        if (nums.empty()) return -1;
        int left = 0, right = n - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (nums[mid] >= target) right = mid - 1;
            else left = mid + 1;
        }
        return right;
    }

    int binarySearchAfter(vector<int>& nums, int target, const int &n) {
        if (nums.empty()) return -1;
        int left = 0, right = n - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (nums[mid] > target) right = mid - 1;
            else left = mid + 1;
        }
        return left;
    }
};
