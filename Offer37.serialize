/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root==nullptr) return "";
        string str;
        subSerialize(root, str);
        return str;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.empty()) return nullptr;
        // cout<<data<<endl;
        list<string> nodes;
        string str;
        for(char& ch: data){
            if(ch==','){
                nodes.push_back(str);
                str.clear();
                continue;
            }
            str.push_back(ch);
        }
        return subDeserialize(nodes);
    }

private:
    void subSerialize(TreeNode* root, string &str){
        if(root==nullptr){
            str += "none,";
            return;
        }
        str += to_string(root->val) + ',';
        // cout<<root->val<<endl;
        // cout<<str<<endl;
        subSerialize(root->left, str);
        subSerialize(root->right, str);
    }

    TreeNode* subDeserialize(list<string>& nodes){
        if(nodes.front()=="none"){
            nodes.erase(nodes.begin());
            return nullptr;
        }
        TreeNode* root = new TreeNode(stoi(nodes.front()));
        nodes.erase(nodes.begin());
        root->left = subDeserialize(nodes);
        root->right = subDeserialize(nodes);
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
