class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        for (char &ch: s) {
            if (isLeft(ch)) st.push(ch);
            else if (isRight(ch)) {
                if (st.empty() || !isPaired(st.top(), ch)) 
                    return false;
                st.pop();
            }
            else return false;
        }
        return st.empty();
    }

private:
    bool isLeft(char ch) {
        if (ch == '(' || ch == '{' || ch == '[')
            return true;
        return false;
    }
    bool isRight(char ch) {
        if (ch == ')' || ch == '}' || ch == ']')
            return true;
        return false;
    }
    bool isPaired(char ch1, char ch2) {
        if ((ch1 == '(' && ch2 == ')') || (ch1 == '{' && ch2 == '}') || (ch1 == '[' && ch2 == ']'))
            return true;
        return false;
    }
};

// 0906
class Solution {
public:
    bool isValid(string s) {
        stack<char> stk;
        for (int i = 0; i < s.size(); i++) {
            if (mp.find(s[i]) == mp.end()) {
                if (stk.empty() || mp[stk.top()] != s[i]) {
                    return false;
                } else {
                    stk.pop();
                }
            } else {
                stk.push(s[i]);
            }
        }
        return stk.empty();
    }

    unordered_map<char, char> mp = {
        {'(', ')'},
        {'{', '}'},
        {'[', ']'}
    };
};
