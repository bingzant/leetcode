class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int> mp;
        int maxLength = 0, length = 0;
        for (int i = 0; i < s.size(); ++i) {
            if (mp.find(s[i]) == mp.end()) {
                mp.insert(pair<char, int> (s[i], i));
                ++length;
            } else {
                int distance = i - mp[s[i]];
                if (distance > length) ++length; 
                else length = distance;
                mp[s[i]] = i;
            }
            maxLength = max(length, maxLength);
        }
        return maxLength;
    }
};

// Solution 2
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.size();
        int left = 0, max_length = 0;
        unordered_set<char> se;
        for (int right = 0; right < n; right++) {
            while (se.find(s[right]) != se.end()) {
                se.erase(s[left]);
                left++;
            }
            se.insert(s[right]);
            max_length = max(max_length, right - left + 1);
        }
        return max_length;
    }
};
