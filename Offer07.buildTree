/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    unordered_map<int, int> index;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i=0; i<inorder.size(); i++){
            index[inorder[i]] = i;
        }
        
        // TreeNode* root;

        return my(preorder, inorder, 0, preorder.size()-1, 0, inorder.size()-1);
    }

    TreeNode* my(const vector<int>& preorder, const vector<int>& inorder,
     int pre_start, int pre_end, int in_start, int in_end){
        if(pre_start>pre_end){
            return nullptr;
        }
        
        int inorder_root = index[preorder[pre_start]];
        int left_length = inorder_root - in_start;
        TreeNode* root = new TreeNode(preorder[pre_start]);

        root->left = my(preorder, inorder, pre_start+1, pre_start+left_length, in_start, inorder_root-1);
        root->right = my(preorder, inorder, pre_start+left_length+1, pre_end, inorder_root+1, in_end);
        // left:
        // in_start inorder_root-1
        // pre_start+1  pre_start + inorderLength
        // right:

        return root;
    }
};
