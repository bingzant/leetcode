class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        backtrace(nums, res, 0, nums.size());
        return res;
    }

    void backtrace(vector<int>& nums, vector<vector<int>> &res, int start, int len) {
        if (start == len - 1) {
            res.push_back(nums);
            return;
        }

        for (int i = start; i < len; i++) {
            swap(nums[start], nums[i]);
            backtrace(nums, res, start + 1, len);
            swap(nums[start], nums[i]);
        }

    }
};

// 使用visited数组
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> res;
        vector<int> output;
        vector<bool> visited(n, false);
        backtrace(nums, res, output, visited, n);
        return res;
    }

    void backtrace(vector<int>& nums, vector<vector<int>> &res, vector<int> &output,  vector<bool> &visited, int len) {
        if (output.size() == len) {
            res.push_back(output);
            return;
        }

        for (int i = 0; i < len; i++) {
            if (visited[i]) continue;
            visited[i] = true;
            output.push_back(nums[i]);
            backtrace(nums, res, output, visited, len);
            output.pop_back();
            visited[i] = false;
        }

    }
};
