/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode *firstHalfEnd = findMiddle(head);
        ListNode *secondHalfEnd = reverseList(firstHalfEnd -> next);
        ListNode *left = head, *right = secondHalfEnd;
        while (left && right) {
            if (left -> val != right -> val) return false;
            left = left -> next;
            right = right -> next;
        }
        firstHalfEnd -> next = reverseList(secondHalfEnd);
        return true;
    }

private:
    ListNode* findMiddle(ListNode *head) {
        if (head == nullptr || head -> next == nullptr) return head;
        ListNode *slow = head, *fast = head -> next;
        while (fast != nullptr && fast -> next != nullptr) {
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        return slow;
    }

    ListNode* reverseList(ListNode *head) {
        if (head == nullptr) return head;
        ListNode *pre = nullptr, *cur = head;
        while (cur != nullptr) {
            ListNode *next = cur -> next;
            cur -> next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
};
